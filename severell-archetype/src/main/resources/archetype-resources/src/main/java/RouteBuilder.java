package ${package};

import com.severell.core.http.MiddlewareExecutor;
import com.severell.core.http.RouteExecutor;
import java.util.ArrayList;

/**
 * GENERATED CLASS: This class is generated by the severell-maven-plugin. DO NOT EDIT
 */
public class RouteBuilder {
    public ArrayList<RouteExecutor> build() {
        ArrayList<RouteExecutor> list = new ArrayList<>();

        // ********* ROUTE: "GET" - "/" ********* 
        ArrayList<MiddlewareExecutor> middlewareList0 = new ArrayList<>();
        list.add(new RouteExecutor("/", "GET", middlewareList0, (request, response, container) -> {
            ${package}.controller.MainController cont = new ${package}.controller.MainController();
            cont.index(request,response);
        }));

        // ********* ROUTE: "HEAD" - "/" ********* 
        ArrayList<MiddlewareExecutor> middlewareList1 = new ArrayList<>();
        list.add(new RouteExecutor("/", "HEAD", middlewareList1, (request, response, container) -> {
            ${package}.controller.MainController cont = new ${package}.controller.MainController();
            cont.index(request,response);
        }));

        // ********* ROUTE: "GET" - "/register" ********* 
        ArrayList<MiddlewareExecutor> middlewareList2 = new ArrayList<>();
        list.add(new RouteExecutor("/register", "GET", middlewareList2, (request, response, container) -> {
            ${package}.controller.auth.AuthController cont = new ${package}.controller.auth.AuthController();
            cont.register(request,response);
        }));

        // ********* ROUTE: "HEAD" - "/register" ********* 
        ArrayList<MiddlewareExecutor> middlewareList3 = new ArrayList<>();
        list.add(new RouteExecutor("/register", "HEAD", middlewareList3, (request, response, container) -> {
            ${package}.controller.auth.AuthController cont = new ${package}.controller.auth.AuthController();
            cont.register(request,response);
        }));

        // ********* ROUTE: "GET" - "/login" ********* 
        ArrayList<MiddlewareExecutor> middlewareList4 = new ArrayList<>();
        list.add(new RouteExecutor("/login", "GET", middlewareList4, (request, response, container) -> {
            ${package}.controller.auth.AuthController cont = new ${package}.controller.auth.AuthController();
            com.severell.core.drivers.Session p2 = container.make(com.severell.core.drivers.Session.class);
            ((com.severell.core.http.NeedsRequest) p2).setRequest(request);
            ${package}.auth.Auth p3 = container.make(${package}.auth.Auth.class);
            cont.login(request,response,p2,p3);
        }));

        // ********* ROUTE: "HEAD" - "/login" ********* 
        ArrayList<MiddlewareExecutor> middlewareList5 = new ArrayList<>();
        list.add(new RouteExecutor("/login", "HEAD", middlewareList5, (request, response, container) -> {
            ${package}.controller.auth.AuthController cont = new ${package}.controller.auth.AuthController();
            com.severell.core.drivers.Session p2 = container.make(com.severell.core.drivers.Session.class);
            ((com.severell.core.http.NeedsRequest) p2).setRequest(request);
            ${package}.auth.Auth p3 = container.make(${package}.auth.Auth.class);
            cont.login(request,response,p2,p3);
        }));

        // ********* ROUTE: "POST" - "/login" ********* 
        ArrayList<MiddlewareExecutor> middlewareList6 = new ArrayList<>();
        list.add(new RouteExecutor("/login", "POST", middlewareList6, (request, response, container) -> {
            ${package}.controller.auth.AuthController cont = new ${package}.controller.auth.AuthController();
            ${package}.auth.Auth p1 = container.make(${package}.auth.Auth.class);
            cont.loginPost(request,p1,response);
        }));

        // ********* ROUTE: "POST" - "/register" ********* 
        ArrayList<MiddlewareExecutor> middlewareList7 = new ArrayList<>();
        list.add(new RouteExecutor("/register", "POST", middlewareList7, (request, response, container) -> {
            ${package}.controller.auth.AuthController cont = new ${package}.controller.auth.AuthController();
            ${package}.auth.Auth p1 = container.make(${package}.auth.Auth.class);
            cont.registerPost(request,p1,response);
        }));
        return list;
    }

    public ArrayList<MiddlewareExecutor> buildDefaultMiddleware() {
        ArrayList<MiddlewareExecutor> defaultMiddleware = new ArrayList<>();
        defaultMiddleware.add(new MiddlewareExecutor((request, response, container, chain) -> {
            com.severell.core.drivers.Session p0 = container.make(com.severell.core.drivers.Session.class);
            ((com.severell.core.http.NeedsRequest) p0).setRequest(request);
            com.severell.core.middleware.CsrfMiddleware middleware = new com.severell.core.middleware.CsrfMiddleware(p0);
            middleware.handle(request, response, chain);
        }));
        defaultMiddleware.add(new MiddlewareExecutor((request, response, container, chain) -> {
            com.severell.core.middleware.SecureHeadersMiddleware middleware = new com.severell.core.middleware.SecureHeadersMiddleware();
            middleware.handle(request, response, chain);
        }));
        return defaultMiddleware;
    }
}